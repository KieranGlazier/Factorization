
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = new File(projectDir.getPath() + "/fzversion").getText("UTF-8").replaceAll("\\s", "")
if (System.getenv("ALLOW_NORELEASE") != null) {
    version = version + "-norelease"
    print "ALLOW_NORELEASE is enabled\n"
}
group = "factorization"
archivesBaseName = "Factorization"

minecraft {
    version = "1.8.9-11.15.1.1764"
    runDir = "Run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20160114"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    makeObfSourceJar = false // AbrarSyed says: disable this to get gradle to exit cleaning when building
}



// ext.apiRailcraft = "./apis/railcraft"


sourceSets {
    main {
        java {
            // srcDir project.apiRailcraft
        }
    }
}

// repositories {
//     maven {
//         name = "ic2"
//         url = "http://maven.ic2.player.to/"
//     }   
// }

configurations {
    api
    compile.extendsFrom api
}

// Target java 1.6
// NORELEASE: back to 1.6!
//targetCompatibility = '1.6'
//sourceCompatibility = '1.6'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

dependencies {
    // api 'net.industrial-craft:industrialcraft-2:2.2.767-experimental:dev'
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
    
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env 
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env 

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    compile files("apis/*.jar") // TODO: Copy what railcraft's build.gradle does for the IC2 dependency
}

compileJava {
    // Prevents NORELEASE from being compiled
    if (System.getenv("ALLOW_NORELEASE") == null) {
        exclude "factorization/shared/NORELEASE.java"
    }
    exclude "Gradle*.java"
    exclude "**.blend*"
}

task writeFzFile {
    shouldRunAfter "build"
    doFirst {
        def outName = "build/libs/" + archivesBaseName + "-" + version + ".jar"
        print "\n\n   " + outName + "\n\n"
        def last_fz = new File("last_fz")
        last_fz.delete()
        last_fz << outName
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // replace version and mcversion
        expand 'version':(project.version.split("-")[1]), 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes("FMLCorePlugin": "factorization.coremod.LoadingPlugin",
                   "FMLCorePluginContainsFMLMod": "true",
                   "FMLAT": "factorization_at.cfg")
    }
    exclude "mods/**"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = 'dev'
    
    // Copied from 'jar'
    manifest {
        attributes("FMLCorePlugin": "factorization.coremod.LoadingPlugin",
                   "FMLCorePluginContainsFMLMod": "true",
                   "FMLAT": "factorization_at.cfg")
    }
    exclude "mods/**"
    // End copied from 'jar'?
}

// runClient { args "--username" "username" }
// task copySrcJar(type: Copy, dependsOn: "remapJar") {
//     from zipTree("/home/poseidon/.gradle/caches/minecraft/net/minecraftforge/forge/${minecraft.apiVersion}/forgSrc-${minecraft.version}-${minecraft.apiVersion}-sources.jar")
//     exclude "META-INF/**"
//     into "mcSrc"
// }
// tasks.setupDecompWorkspace.dependsOn "copySrcJar"

// task apiJar(type: Jar, dependsOn: 'classes') {
//     from sourceSets.main.allSource, sourceSets.main.output
//     include 'factorization/api/**'
//     classifier = 'api'
// }



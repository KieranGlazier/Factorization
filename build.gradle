buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        // Can change this line to point to a specific version if ForgeGradle breaks itself
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge' // Try this some time: apply plugin: 'checkstyle'... well that might not work. But see Buildcraft.

version = new File(projectDir.getPath() + "/fzversion").getText("UTF-8").replaceAll("\\s", "")
if (System.getenv("ALLOW_NORELEASE") != null) {
    version = version + "-norelease"
    print "ALLOW_NORELEASE is enabled\n"
}

group = "factorization"
archivesBaseName = "Factorization"

// ext.apiRailcraft = "./apis/railcraft"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10" // FORGEMARK
    assetDir = "eclipse/assets"
    replace '@FZVERSION@', (project.version.split("-")[1])
}

repositories {
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }   
}

configurations {
    api
    compile.extendsFrom api
}

// Target java 1.6
targetCompatibility = '1.6'
sourceCompatibility = '1.6'

repositories {
    maven {   
        name = "ChickenBones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "GregTech mirror"
        url = "http://gregtech.overminddl1.com/"
    }
}


dependencies {
    if (System.getenv("DISABLE_CBBS") == null) {
        // How exactly do you set a variable? Tried 'ext.cbbs', but that doesn't work in places.
        // That's pretty silly.
        compile 'codechicken:NotEnoughItems:1.7.10-1.0.2.15:dev'
        compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
        compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    }
    api 'net.industrial-craft:industrialcraft-2:2.2.767-experimental:dev'
    compile 'mods.railcraft:Railcraft_1.7.10:9.12.3.0:dev'
    compile "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"  
    compile "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
    compile files("apis/*.jar") // TODO: Copy what railcraft's build.gradle does for the IC2 dependency
}

compileJava {
    // Prevents NORELEASE from being compiled
    if (System.getenv("ALLOW_NORELEASE") == null) {
        exclude "factorization/shared/NORELEASE.java"
    }
    exclude "Gradle*.java"
    if (System.getenv("DISABLE_CBBS") != null) {
        exclude "factorization/nei/**.java"
    }

}

task writeFzFile {
    shouldRunAfter "build"
    doFirst {
        def outName = "build/libs/" + archivesBaseName + "-" + version + ".jar"
        print "\n\n   " + outName + "\n\n"
        def last_fz = new File("last_fz")
        last_fz.delete()
        last_fz << outName
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // replace version and mcversion
        expand 'version':(project.version.split("-")[1]), 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes("FMLCorePlugin": "factorization.coremod.LoadingPlugin",
                   "FMLCorePluginContainsFMLMod": "true")
    }
    exclude "codechicken/**"
    exclude "mods/**"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = 'dev'
    
    // Copied from 'jar'
    manifest {
        attributes("FMLCorePlugin": "factorization.coremod.LoadingPlugin",
                   "FMLCorePluginContainsFMLMod": "true")
    }
    exclude "codechicken/**"
    exclude "mods/**"
    // End copied from 'jar'?
}

// runClient { args "--username" "username" }
// task copySrcJar(type: Copy, dependsOn: "remapJar") {
//     from zipTree("/home/poseidon/.gradle/caches/minecraft/net/minecraftforge/forge/${minecraft.apiVersion}/forgSrc-${minecraft.version}-${minecraft.apiVersion}-sources.jar")
//     exclude "META-INF/**"
//     into "mcSrc"
// }
// tasks.setupDecompWorkspace.dependsOn "copySrcJar"

// task apiJar(type: Jar, dependsOn: 'classes') {
//     from sourceSets.main.allSource, sourceSets.main.output
//     include 'factorization/api/**'
//     classifier = 'api'
// }


